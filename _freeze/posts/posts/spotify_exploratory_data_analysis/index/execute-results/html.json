{
  "hash": "3beddd1119b6eee9224b8f9698bcc380",
  "result": {
    "markdown": "---\ntitle: \"Spotify Exploratory Data Analysis - Streaming History Data\"\ndescription: \"My Spotify streaming history throughout July 2022/2023\"\nauthor: \"Johann Wagner\"\ndate: \"2023-12-29\"\ncategories:\n  - \"Data Projects\"\n  - \"Exploratory Data Analysis\"\n  - \"Spotify\"\n---\n\n\n## Introduction\n\nThis is a series of exploratory data analysis (EDA) projects on my Spotify data. The data was downloaded from my Spotify account on July 23rd, 2023. The data is downloaded as a zip file containing several json files and saved on my personal google drive. The json files are then converted into tibbles for analysis using the `jsonlite` package.\n\nThis quarto document is the first of several EDA projects. This project focuses on my streaming history. I'm interested in exploring my listening habits across the time period of the data. I'm also interested in exploring my listening habits across the days of the week.\n\nThis process is documented in the following sections:\n\n-   Setup and Configuration: Loading packages and googledrive API access\n\n-   Data Loading: How to download and load the data?\n\n-   Data Tidying: Get a tidy dataset\n\n-   Data Cleaning: Ensure variables are in correct formats\n\n-   Data Exploration: Answer one question and come up with two extra ones\n\nLet's start exploring!\n\n## Setup and Configuration\n\nFirst, let's load in the packages we'll need for this project and authorise access to my google drive.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### \"Tidyverse\"-oriented packages:\n\n# The tidyverse is a collection of R packages designed for data science.\n# All packages share a similar design philosophy, grammar, and data structures.\n# Tidyverse includes packages such as:\n# ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, lubridate, and forcats.\n### https://www.tidyverse.org/\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n# To easily create data visualisations with simple and consistent syntax and grammar.\n# https://ggplot2.tidyverse.org/index.html\nlibrary(ggplot2)\n\n# To allow interaction between files on Google Drive and R.\n# https://googledrive.tidyverse.org/\nlibrary(googledrive)\n\n\n\n### Other Packages:\n# To easily create summary statistics to understand and explore data.\n# https://docs.ropensci.org/skimr/\nlibrary(skimr)\n\n# A fast JSON parser and generator.\n### https://cran.r-project.org/web/packages/jsonlite/index.html\nlibrary(jsonlite)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'jsonlite'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n```\n:::\n\n```{.r .cell-code}\n# To easily enable file referencing in project-oriented workflows.\n# https://here.r-lib.org/\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at C:/Users/Johan/Documents/GitHub/johann-wagner\n```\n:::\n\n```{.r .cell-code}\n# To easily format and scale data in visualisations.\n# https://scales.r-lib.org/\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n:::\n\n```{.r .cell-code}\n# Google Drive Authentication --------------------------------------------------\n\n# To establish a connection between a Google Drive account and R.\ndrive_auth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Using an auto-discovered, cached token.\n  To suppress this message, modify your code or options to clearly consent to\n  the use of a cached token.\n  See gargle's \"Non-interactive auth\" vignette for more details:\n  <https://gargle.r-lib.org/articles/non-interactive-auth.html>\nℹ The googledrive package is using a cached token for\n  'johann.wagner@gmail.com'.\n```\n:::\n\n```{.r .cell-code}\n# Example of how to download from Google Drive\n# drive_download(\n#   # Where to download file from\n#   \"https://drive.google.com/file/d/1Fjq1r6016H4isB2Cx2wg-Xm9zY7lHhYV/view?usp=drive_link\",\n# \n#   # Where to save it locally\n#   path = here(\"foldertest\", \"text2\")\n#   )\n```\n:::\n\n\n## Data Loading\n\nTo access the data, I need to download it from my google drive. The data is requested from Johann's Spotify account and downloaded as a zip file containing several json files. There are several different json files; however, for this analysis I'm only interested in the Streaming History files.\n\nYou will only have access if Johann has given you read access to the email you authorised in 0-00_setup_and_configuration.R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Only download raw data if it hasn't already been downloaded\nif(!dir.exists(here(\"raw_data\"))) {\n  dir.create(here(\"raw_data\"), showWarnings = FALSE)\n\n  # List contents of Spotify Analysis Folder\n  spotify_dribble <- drive_ls(\"Spotify Analysis\")\n  \n  # Download raw data\n  map2(\n    spotify_dribble$id,\n    spotify_dribble$name,\n    ~ drive_download(\n      file = as_id(.x),\n      path = here(\"raw_data\", .y),\n      overwrite = TRUE\n    )\n  )\n}\n\n\n\n# Read in individual raw json as nested lists\n# JRAW = RAW JSON\n# RAW_JSON causes alphabetical ordering inconveniences in R environment.\nJRAW_STREAMING_HISTORY_0 <- read_json(\n  path = here(\n    \"raw_data\",\n    \"StreamingHistory0.json\"\n  )\n)\n\nJRAW_STREAMING_HISTORY_1 <- read_json(\n  path = here(\n    \"raw_data\",\n    \"StreamingHistory1.json\"\n  )\n)\n\nJRAW_STREAMING_HISTORY_2 <- read_json(\n  path = here(\n    \"raw_data\",\n    \"StreamingHistory2.json\"\n  )\n)\n```\n:::\n\n\n## Data Tidying\n\nThese json files are then converted into tibbles for analysis using the `jsonlite` package. The tibbles are then combined into one tibble, as they all have the same columns. I suspect the reason why there are different files is because of the size of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRAW_STREAMING_HISTORY_0 <- JRAW_STREAMING_HISTORY_0 %>% \n  bind_rows() %>% \n  as_tibble()\n\nRAW_STREAMING_HISTORY_1 <- JRAW_STREAMING_HISTORY_1 %>% \n  bind_rows() |> \n  as_tibble()\n\nRAW_STREAMING_HISTORY_2 <- JRAW_STREAMING_HISTORY_2 %>% \n  bind_rows() |> \n  as_tibble()\n\n# Combine all streaming history tibbles into one tibble\nRAW_STREAMING_HISTORY <- bind_rows(\n  RAW_STREAMING_HISTORY_0,\n  RAW_STREAMING_HISTORY_1,\n  RAW_STREAMING_HISTORY_2\n)\n```\n:::\n\n\n## Data Cleaning\nLet's ensure the variables are in the correct format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCLEANED_STREAMING_HISTORY <- RAW_STREAMING_HISTORY |> \n  mutate(\n    # Convert ms to minutes\n    min_played = as.numeric(msPlayed / 60000),\n    \n    # Convert artistName to factor\n    artist_name = as.factor(artistName),\n    \n    track_name = as.character(trackName),\n    \n    # Convert endTime into lubridate datetime\n    streaming_datetime = as_date(endTime, format = \"%Y-%m-%d %H:%M\")\n  ) |> \n  \n  # Remove unnecessary columns\n  select(\n    artist_name,\n    track_name,\n    streaming_datetime,\n    min_played\n  )\n```\n:::\n\n\n## Data Exploration\nThis data exploration has two objectives:\n1.    To get a sense of the data and to see if there are any issues with the data.\n2.    To answer several questions that I have about my listening habits.\n\n### Sanity Checks\n\nThere are 23456 rows in the CLEANED_STREAMING_HISTORY tibble, which is the number of songs/podcast episodes that I have listened to between 2022-07-11 and 2023-07-11. Let's use the function `skim()` from the skimr package to get a sense check of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCLEANED_STREAMING_HISTORY |> \n  skim()\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |                          |\n|:------------------------|:-------------------------|\n|Name                     |CLEANED_STREAMING_HISTORY |\n|Number of rows           |23456                     |\n|Number of columns        |4                         |\n|_______________________  |                          |\n|Column type frequency:   |                          |\n|character                |1                         |\n|Date                     |1                         |\n|factor                   |1                         |\n|numeric                  |1                         |\n|________________________ |                          |\n|Group variables          |None                      |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|track_name    |         0|             1|   1| 179|     0|     7782|          0|\n\n\n**Variable type: Date**\n\n|skim_variable      | n_missing| complete_rate|min        |max        |median     | n_unique|\n|:------------------|---------:|-------------:|:----------|:----------|:----------|--------:|\n|streaming_datetime |         0|             1|2022-07-11 |2023-07-11 |2022-12-01 |      337|\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts                              |\n|:-------------|---------:|-------------:|:-------|--------:|:---------------------------------------|\n|artist_name   |         0|             1|FALSE   |     4324|Par: 1147, Van: 271, Cou: 217, Lof: 183 |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate| mean|  sd| p0|  p25|  p50| p75|  p100|hist  |\n|:-------------|---------:|-------------:|----:|---:|--:|----:|----:|---:|-----:|:-----|\n|min_played    |         0|             1| 3.01| 2.8|  0| 1.56| 3.08|   4| 82.34|▇▁▁▁▁ |\n:::\n:::\n\n\nThere are 4 columns in the CLEANED_STREAMING_HISTORY tibble. There are 4324 unique artists and 7782 unique tracks in the CLEANED_STREAMING_HISTORY tibble. It is interesting that the shortest `track_name` has a length of 1 characters and the longest `track_name` has a length of 179 characters. Interestingly, the shortest `track_name` has a length of 1 characters. I wonder what song that is. The date ranges between 2022-07-11 and 2023-07-11.\n\nIt seems like the data mostly makes sense and that there are a wide range of song names and artist names.\n\n### Reshape Data: Streaming per day\nLet's reshape the data so that we can see how much I have streamed per day.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSTREAMING_HISTORY_PER_DAY <- CLEANED_STREAMING_HISTORY |> \n  group_by(streaming_datetime) |>\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  )\nSTREAMING_HISTORY_PER_DAY\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 337 × 2\n   streaming_datetime total_hours_played\n   <date>                          <dbl>\n 1 2022-07-11                      2.41 \n 2 2022-07-12                      5.31 \n 3 2022-07-13                      2.78 \n 4 2022-07-14                      3.52 \n 5 2022-07-15                      4.38 \n 6 2022-07-16                      9.42 \n 7 2022-07-17                      4.99 \n 8 2022-07-18                      3.64 \n 9 2022-07-19                      3.78 \n10 2022-07-20                      0.147\n# ℹ 327 more rows\n```\n:::\n:::\n\n\n### What were the top 5 days I listened to music?\n\nLet's now investigate what the top 5 days I listened to music were and include the day of the week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTOP_SONGS <- STREAMING_HISTORY_PER_DAY |>\n  mutate(\n    day_of_week = wday(streaming_datetime, label = TRUE)\n  ) |> \n  arrange(desc(total_hours_played)) |> \n  head(5)\nTOP_SONGS\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  streaming_datetime total_hours_played day_of_week\n  <date>                          <dbl> <ord>      \n1 2023-05-30                       17.2 Tue        \n2 2023-02-18                       13.9 Sat        \n3 2022-11-01                       11.9 Tue        \n4 2022-12-16                       11.8 Fri        \n5 2022-09-02                       11.2 Fri        \n```\n:::\n:::\n\n\nIt seems like 2023-05-30 and 2023-02-18 were two days when I listened to a LOT of music.\n\nLet's pull it back and look at the aggregate again; I wonder what the most listened to days are?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSTREAMING_HISTORY_PER_DAY |> \n  mutate(\n    day_of_week = wday(streaming_datetime, label = TRUE)\n    ) |> \n  group_by(day_of_week) |>\n  summarise(\n    total_hours_played = sum(total_hours_played)\n  ) |>\n  arrange(desc(total_hours_played))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  day_of_week total_hours_played\n  <ord>                    <dbl>\n1 Mon                       199.\n2 Tue                       185.\n3 Sat                       180.\n4 Fri                       164.\n5 Thu                       157.\n6 Sun                       151.\n7 Wed                       140.\n```\n:::\n:::\n\n\nSurprisingly, it seems like Mondays are the days where I have listened to the most streamed music. I wonder if this is because I listen to music on my commute to work? Although, I don't think I was really working consistently in 2022-23.\n\nSo potentially this is because I listen to music when I was studying? To answer this question and gain more insights, I would need to look at my calendar and see what I was doing on those days.\n\n### How did my streaming time vary by day?\n\nLet's plot the total hours played per day.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGGPLOT_HOURS_PLAYED_PER_DAY <- STREAMING_HISTORY_PER_DAY |> \n  ggplot(aes(x = streaming_datetime, y = total_hours_played)) +\n  \n  geom_point() +\n  geom_line() +\n  \n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Hours Played Per Day\",\n    subtitle = \"Spotify Streaming History\"\n  ) +\n  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(\n      size = 20,\n      face = \"bold\"\n    ),\n    plot.subtitle = element_text(\n      size = 15\n    ),\n    axis.title = element_text(\n      size = 15\n    ),\n    axis.text = element_text(\n      size = 10\n    )\n  )\n\nGGPLOT_HOURS_PLAYED_PER_DAY\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThere is a high fluctuation in the number of hours played per day with some days, when very little music was played and some days were a lot of music was played. It seems that there are two days in particular, where I have listened to a lot of music. Let's investigate these days further, we know that the days are:  2023-05-30 and 2023-02-18. What did I do on these two days? Let's also include a smoothed line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGGPLOT_HOURS_PLAYED_PER_DAY +\n  \n  geom_point(aes(\n    colour = ifelse(\n      streaming_datetime == as.Date(\"2023-05-30\") | \n        streaming_datetime == as.Date(\"2023-02-18\"),\n      \"red\",\n      \"darkgrey\"\n    )\n    )\n  ) +\n  geom_line(colour = \"darkgrey\") +\n  geom_smooth() +\n  geom_label(\n    label = \"Flying to Australia\",\n    x = as.Date(\"2023-05-30\"),\n    y = STREAMING_HISTORY_PER_DAY |> \n      filter(streaming_datetime == as.Date(\"2023-05-30\")) |> \n      pull(total_hours_played),\n    vjust = -0.5\n  ) +\n  geom_label(\n    label = \"Flying to Austria\",\n    x = as.Date(\"2023-02-18\"),\n    y = STREAMING_HISTORY_PER_DAY |> \n      filter(streaming_datetime == as.Date(\"2023-02-18\")) |> \n      pull(total_hours_played),\n    vjust = -0.5\n  ) +\n    expand_limits(\n    y = c(0, 20)\n  ) +\n  scale_color_identity()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nFlying in the plane and listening to music! That makes sense. The smoothed line suggests that there was more music listened to in the second half of 2022 than the first half of 2023. \n\n### How did my streaming time vary by month?\nLet's investigate this further: what was the total number of hours played per month?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSTREAMING_HISTORY_PER_MONTH <- CLEANED_STREAMING_HISTORY |> \n  mutate(\n    month_floor = floor_date(streaming_datetime, unit = \"month\"),\n    year_floor = floor_date(streaming_datetime, unit = \"year\")\n  ) |> \n  group_by(month_floor, year_floor) |>\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'month_floor'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n\nLet's plot the total hours played per month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSTREAMING_HISTORY_PER_MONTH |> \n  ggplot(aes(x = month_floor, y = total_hours_played)) +\n  \n  geom_point() +\n  geom_line() +\n  \n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Hours Played Per Month\",\n    subtitle = \"Spotify Streaming History\"\n  ) +\n  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(\n      size = 20,\n      face = \"bold\"\n    ),\n    plot.subtitle = element_text(\n      size = 15\n    ),\n    axis.title = element_text(\n      size = 15\n    ),\n    axis.text = element_text(\n      size = 10\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\nThere seems to be a bit of a pattern. Before I went backpacking (Jan 2023), I was listening to a lot more music. Let's calculate the total number of hours played in both years and see how different they are.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSTREAMING_HISTORY_PER_MONTH |> \n  group_by(year_floor) |>\n  summarise(\n    total_hours_played = sum(total_hours_played)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  year_floor total_hours_played\n  <date>                  <dbl>\n1 2022-01-01               697.\n2 2023-01-01               481.\n```\n:::\n:::\n\n\nThere definitely seems like there is a major difference between the two years. I wonder if this is because I was travelling in 2023 and therefore didn't have as much time to listen to music. Let's investigate this further.\n\n### Who were my top artists?\nLet's investigate who my top artists are. We will do this by grouping by artist name and then calculating the total number of hours played.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCLEANED_STREAMING_HISTORY |> \n  group_by(artist_name) |>\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  ) |> \n  arrange(desc(total_hours_played)) |> \n  head(10) |> \n  ggplot(aes(x = reorder(artist_name, total_hours_played), y = total_hours_played)) +\n  geom_col(aes(fill = ifelse(total_hours_played > 20, \"orange\", \"grey\"))) +\n  coord_flip() +\n  scale_y_continuous(\n    breaks = seq(0, 100, 10)\n  ) +\n  scale_fill_identity() +\n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Top Artists\",\n    subtitle = \"Spotify Streaming History: July 2022 - July 2023\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nAs expected, I'm a massive Parcels fan and the data shows it!\nLet's look at my top artists for each month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCLEANED_STREAMING_HISTORY |> \n  mutate(\n    month_floor = floor_date(streaming_datetime, unit = \"month\")\n  ) |> \n  group_by(month_floor, artist_name) |>\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  ) |> \n  arrange(desc(total_hours_played)) |> \n  group_by(month_floor) |> \n  slice(1) |> \n  ggplot(aes(x = month_floor, y = total_hours_played, fill = artist_name)) +\n  geom_col() +\n  scale_fill_viridis_d() +\n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Top Artists Per Month\",\n    subtitle = \"Spotify Streaming History: July 2022 - July 2023\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'month_floor'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nWow, Parcels really was my favourite artist consistently throughout the time range, although from April 2023 onwards, it seems I started listening to more podcasts. A further question for future investigation: How does my podcast listening behaviour change over time.\n\n### What were my top songs?\nLet's move onto top songs. We will do this by grouping by track name and then calculating the total number of hours played.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCLEANED_STREAMING_HISTORY |> \n  group_by(track_name, artist_name) |>\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  ) |> \n  arrange(desc(total_hours_played)) |> \n  head(10) |> \n  ggplot(aes(x = reorder(track_name, total_hours_played), y = total_hours_played)) +\n  geom_col(aes(fill = ifelse(artist_name == \"Parcels\", \"orange\", \"grey\"))) +\n  coord_flip() +\n  scale_y_continuous(\n    breaks = seq(0, 10, 2)\n  ) +\n  scale_fill_identity() +\n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Top Songs\",\n    subtitle = \"Spotify Streaming History: July 2022 - July 2023\\nOrange = Parcels\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'track_name'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nFive of the top 10 songs were songs from Parcels.\n\nLet's look at the top songs for each month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCLEANED_STREAMING_HISTORY |> \n  mutate(\n    month_floor = floor_date(streaming_datetime, unit = \"month\")\n  ) |> \n  group_by(month_floor, track_name, artist_name) |>\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  ) |> \n  arrange(desc(total_hours_played)) |> \n  group_by(month_floor) |> \n  slice(1) |> \n  mutate(\n    fill_colour = case_when(\n      track_name == \"Lost in Music - Dimitri from Paris Remix\" ~ \"pink\",\n      artist_name == \"Parcels\" ~ \"orange\",\n      .default = \"grey\"\n      )\n  ) |> \n  ggplot(aes(x = month_floor, y = total_hours_played, fill = fill_colour)) +\n  geom_col() +\n  scale_fill_identity() +\n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Top Songs Per Month\",\n    subtitle = \"Spotify Streaming History: July 2022 - July 2023\\nOrange = Parcels\\nPink = Lost in Music - Dimitri from Paris Remix\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'month_floor', 'track_name'. You can\noverride using the `.groups` argument.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nIt seems that I listened to Lost in Music - Dimitri from Paris Remix a lot in July/August 2022. Parcels was my top artist for every month, but it seems that I listened to them a lot more in October 2022 and January/Febuary 2023.\n\n### How did my top 10 songs vary across time?\n\nLet's investigate how my top 10 songs varied across time. We will do this by grouping by track name and then calculating the total number of hours played.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_ten_songs <- CLEANED_STREAMING_HISTORY |> \n  group_by(track_name) |>\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  ) |> \n  arrange(desc(total_hours_played)) |> \n  head(5) |> \n  pull(track_name)\n\nCLEANED_STREAMING_HISTORY |>\n  filter(track_name %in% top_ten_songs) |> \n  mutate(\n    month_floor = floor_date(streaming_datetime, unit = \"month\")\n  ) |>\n  group_by(month_floor, track_name) |>\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  ) |>\n  ggplot(aes(x = month_floor, y = total_hours_played, colour = track_name)) +\n  \n  geom_point() +\n  geom_line() +\n  \n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Top 5 Songs - Hours Played Per Day\",\n    subtitle = \"Spotify Streaming History\",\n    colour = \"Track Name\"\n  ) +\n  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(\n      size = 20,\n      face = \"bold\"\n    ),\n    plot.subtitle = element_text(\n      size = 15\n    ),\n    axis.title = element_text(\n      size = 15\n    ),\n    axis.text = element_text(\n      size = 10\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'month_floor'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nThis is super interesting. It seems that there are some rough patterns in my top 5 songs. For example, \"Lost in Music - Dimitri from Paris Remix\" was played a lot in the first half of 2022 and then not at all in the first half of 2023. Similarly, \"The Girl\" has a similar downwards trend. \"Tieduprightnow\" was played a lot in the new year (2023); however, also dropped. \"Free\" and \"Bitter Sweet Symphony\" were almost perfectly positively correlated with each other with the exception of late 2022.\n\nI wonder if I could do this analysis for all of my songs and then create a grouping/cluster analysis to see if there are any temporal patterns in my music listening? Are there some songs that I listen to with other songs? Do these songs group together because I usually listen to them from the same playlist? Can I somehow link/predict my playlist data and my streaming data?\n\n## Moving Forward\n\nThere are quite a few questions that I would like to explore in the future. For example:\n-   I would like to explore how my podcast listening behaviour change over time.\n-   I would like to explore how my top 10 songs varied across time and utilise the `gganimate` package.\n-   I would really like to do some time series analysis on my streaming history.\n-   I'm curious on linking my streaming history data with my playlist data. I wonder if I can predict my playlist data based on my streaming history data. I think I would typically use Spotify by listening to my playlists, so potentially doing some clustering/grouping analysis on my streaming history data and then linking it to my playlist data would be interesting.\n\nThese are all questions that I would like to explore in future! But for now, these were some great first initial data explorations of my Spotify streaming history. I hope you enjoyed reading this post and I hope you learned something new about Spotify streaming history data analysis. If you have any questions or comments, please feel free to reach out to me. I would love to hear from you! :)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
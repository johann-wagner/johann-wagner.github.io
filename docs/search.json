[
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects",
    "section": "",
    "text": "Here are some of my completed, active, and archived (ideas that didn’t fruition) projects:"
  },
  {
    "objectID": "projects/index.html#invasive-species-rshiny-dashboard",
    "href": "projects/index.html#invasive-species-rshiny-dashboard",
    "title": "Projects",
    "section": "Invasive Species RShiny Dashboard",
    "text": "Invasive Species RShiny Dashboard\n\nPurpose:\nThis project is complete. The dashboard is currently hosted on shinyapps.io. The dashboard is still in the early stages of development and there are still many improvements to be made. The next step is to incorporate the dashboard into this website and share this work with the Atlas of Living Australia.\n\n\nProject Scope:\nThis project was the final assignment for the Data Science for Biologists (DS4B) university course.\nThe project had the following brief: Your task is to:\n\nchoose a dataset or combination of datasets\ndevelop some questions/aims related to that dataset, including appropriate background research\nuse R to address those questions/aims\nwrite your findings into a report of up to 2000 words and 10 figures\nsummarise your findings in a poster which you will present in the week 12 workshop\n\nIdeally, you should choose a combination of dataset and questions/aims that are interesting to you, because the more interesting you find it, the better your work will be!\n\n\nLinks:\n\nRShiny Dashboard\nPoster\nGitHub Repository"
  },
  {
    "objectID": "projects/index.html#spotify-exploratory-data-analysis",
    "href": "projects/index.html#spotify-exploratory-data-analysis",
    "title": "Projects",
    "section": "Spotify Exploratory Data Analysis",
    "text": "Spotify Exploratory Data Analysis\n\nPurpose:\nExplore Johann’s personal Spotify data and discover patterns in his listening habits.\n\n\nProject Status:\n\nCurrently working on looking at the streaming history data.\nNext step is to look at the playlist data and await the entire streaming history data to be available (late Jan 2024).\nThe final step is to create an RShiny dashboard to visualise the data and create some basic descriptive statistics.\nIdeally, this RShiny will allow individuals to upload their own personal Spotify data and explore their own listening habits.\nAdditionally, I would like to recreate my own version of the Spotify Wrapped.\nNeed to explore the Spotify API and see how I can integrate it into the RShiny dashboard.\nLook into other people’s Spotify and R projects to see what I can learn from them.\n\n\n\nLinks:\n\nGitHub Repository.\nSpotify API."
  },
  {
    "objectID": "projects/index.html#leadership-compass",
    "href": "projects/index.html#leadership-compass",
    "title": "Projects",
    "section": "Leadership Compass",
    "text": "Leadership Compass\n\nPurpose:\nCreate an R script that creates a visualisation of the results from the leadership compass survey.\n\n\nProject Status:\nThis project is currently in progress. There are still major improvements to be made to the visualisation and the data workflow. An excel file containing the survey results is currently being used as the data source. The next step is to create a Google Form to collect the survey results and then use the Google Form API to pull the data into the R script. Potentially, this can further be all incoroprated into an RShiny App.\n\n\nLinks:\n\nGitHub Repository"
  },
  {
    "objectID": "cv/index.html",
    "href": "cv/index.html",
    "title": "CV",
    "section": "",
    "text": "Download current CV\n  \n\n\n  \n\nDownload Johann’s CV."
  },
  {
    "objectID": "blog/posts/invasive_species_dashboard_report/index.html",
    "href": "blog/posts/invasive_species_dashboard_report/index.html",
    "title": "Invasive Animal Species Dashboard",
    "section": "",
    "text": "This is a university assignment for the course Data Science for Biology at the Australian National University (ANU). The purpose of the assignment was to formulate a research question, use R and a relevant dataset to address the question and communicate the analysis into a report and a poster.\nI developed an RShiny Dashboard visualising seven different invasive species by state/territory using ALA data through the galah package with a focus on spatial and temporal visualisations. The dashboard also allows users to download the cleaned dataset for the selected invasive animal species for a particular state/territory.\nThe Dashboard is available here.\nThe GitHub repository is available here.\nEnjoy! :)"
  },
  {
    "objectID": "blog/posts/invasive_species_dashboard_report/index.html#initial-aims",
    "href": "blog/posts/invasive_species_dashboard_report/index.html#initial-aims",
    "title": "Invasive Animal Species Dashboard",
    "section": "Initial Aims:",
    "text": "Initial Aims:\n\nDevelop an RShiny app that showcases the spatial and temporal (monthly) occurrence of the top 5-10 7 invasive animal species in Australia by state/territory and by regionality (urban vs. regional)\nVisualise and calculate the proportion of the selected invasive animal species observed in an urban area\nCreate a download option for users to download the cleaned dataset for the selected invasive animal species for a particular state/territory"
  },
  {
    "objectID": "blog/posts/invasive_species_dashboard_report/index.html#justifications",
    "href": "blog/posts/invasive_species_dashboard_report/index.html#justifications",
    "title": "Invasive Animal Species Dashboard",
    "section": "Justifications:",
    "text": "Justifications:\nInitially, I was interested in the spatial distribution of magpies in Canberra as I’m an avid cyclist and wanted to find the hotspots of magpie records and linking/statistically model this data with a collaborative magpie swooping database called magpiealert.com. Unfortunately, the data was not available and the sampling bias of the occurrence data may not be truly representative, as observations are more likely to be near roads, airports, and major urban areas (Kellie, 2022).\nThis made me interested in simply visualising the data spatially, instead of using any statistical methodologies and focusing the project on whether there would be major differences/patterns of occurrence records in urban vs. non-urban/regional areas. Unfortunately, given the scope of the project, calculating the urban vs. non-urban analysis would have been too much scope-creep, so this aim was ignored (maybe post-project exploration).\nHughes et al. (2021) and Guerin et al. (2016) highlight the spatial sampling bias associated with biodiversity data suggesting that these biases must first be understood before applying any statistical modelling methods. Interestingly, Australian research by Piccolo et al. (2020) show that reptile research locations are highly positively correlated with proximity to universities suggesting biodiversity research locations are closely associated by accessibility. Similarly, temporal biases can also influence results, as species distributions can change across time (Boakes et al., 2010).\nThe Atlas of Living Australia already have a browser-based spatial visualisation tool, where a specific species can be selected and plotted on a map. However, there seemed to not be a functionality to comparing both the spatial and temporal (by month) variables.\nThis dashboard is the initial step in data exploration step and in the essence of open and citizen-science, I wanted to make my cleaned data easily available through the dashboard. Data sharing enables for further analysis and reusability (Tedersoo et al., 2021, Ramachandran et al., 2021). I wanted my dashboard to follow the FAIR Data Principles (Wilkinson et al., 2016).\nI chose invasive animal species, because of the rabbits I see when cycling in Canberra. The other 6 species were chosen arbitrarily based off this article, which summarises the results from Kearney et al.’s paper (2018).\nA deeper understanding of my thought process is documented in GitHub Issue #4.\nThe analysis was based on this ALA Labs article (Smith et al., 2023)."
  },
  {
    "objectID": "blog/posts/invasive_species_dashboard_report/index.html#aim-1-dashboard-and-visualisations",
    "href": "blog/posts/invasive_species_dashboard_report/index.html#aim-1-dashboard-and-visualisations",
    "title": "Invasive Animal Species Dashboard",
    "section": "Aim 1: Dashboard and Visualisations",
    "text": "Aim 1: Dashboard and Visualisations\nFolder System\nThe RShiny app can be found in the GitHub folder DS4B-final-project/invasive_species_dashboard. Similar to R Project environments, the RShiny app is all self-contained in this folder. The individual R scripts in the DS4B-final-project/scripts folder must be run first to produce and save the dashboard data within the RShiny folder for most recent data.\nThe RShiny App\nThe RShiny folder contains four files:\n\n0-00_setup_and_configuration.R: loads relevant packages and custom-made functions to create the analysis/visualisations/RShiny.\ndashboard_data.csv: is the cleaned occurrence data for the seven invasive species, including spatial and temporal variables.\nserver.R contains the back-end logic/code that takes the two inputs to dynamically create/adjust the visualisations/titles/downloads.\nui.R contains the front-end user-interface design and layout of the app.\nSpatial Visualisation: European Rabbits in ACT\nLet’s create the spatial visualisation using European Rabbits and ACT as the inputs.\n\nlibrary(scales)\nspecies_simple_name &lt;- \"European Rabbits\"\nstate_name &lt;- \"Australian Capital Territory\"\n\n\ndashboard_data &lt;- read_csv(\"processed_data/dashboard_data.csv\")\n\nspatial_data &lt;- dashboard_data %&gt;%\n  filter(\n    simpleName == species_simple_name,\n    state      == state_name\n  )\n\n\n\ncapital_cities_data &lt;- tibble::tribble(\n  ~state,                         ~city,       ~lat,     ~lon,\n  \"Australian Capital Territory\", \"Canberra\",  -35.2809, 149.1300,\n) %&gt;%\n  filter(state == state_name)\n\n\n\nstate2021 %&gt;%\n\n  filter(state_name_2021 == state_name) %&gt;%\n  ggplot() +\n\n  geom_sf(\n    aes(geometry = geometry),\n    fill = \"#E5E4E2\"\n  ) +\n  geom_point(\n    data = spatial_data,\n    aes(\n      x = decimalLongitude,\n      y = decimalLatitude,\n      size = simpleName\n    ),\n    alpha = 0.6,\n    colour = \"#1b9e77\"\n  ) +\n  geom_point(\n    data = capital_cities_data,\n    aes(\n      x = lon,\n      y = lat,\n      shape = city\n    ),\n    colour = \"#d95f02\",\n    size = 4\n  ) +\n  coord_sf() +\n\n  theme_minimal() +\n\n  # Ref [1]\n  labs(\n    title = bquote(\"There are\" ~\n                     bold(.({\n                       spatial_data %&gt;%\n                         nrow() %&gt;%\n                         comma()\n                     })) ~\n                     \"records:\"),\n    subtitle = bquote(bold(.(\n      species_simple_name\n    )) ~\n      \"in\" ~\n      bold(.(state_name))),\n    shape = \"Capital City\",\n    size = \"Invasive Species\"\n  ) +\n  theme(\n    axis.title = element_blank(),\n    axis.ticks = element_blank(),\n    axis.text = element_blank(),\n    panel.grid = element_blank(),\n\n    plot.title = element_text(size = 13),\n\n    # Ref [2]: Improve readability\n    legend.text = element_text(size = 12),\n    legend.title = element_text(\n      size = 12,\n      face = \"bold\"\n    ),\n    legend.direction = \"vertical\",\n    legend.background = element_rect(\n      fill = \"#E5E4E2\",\n      colour = \"#708090\"\n    ),\n    legend.position = \"right\",\n    legend.justification = c(\"right\", \"bottom\"),\n    legend.box.just = \"right\",\n    legend.margin = margin(6, 6, 6, 6),\n\n    panel.background = element_rect(fill = \"transparent\", colour = \"transparent\")\n  )\n\n\n\n\n\n\n# References:\n# 1: https://labs.ala.org.au/posts/2023-05-16_dingoes/post.html\n# 2: https://r-graph-gallery.com/239-custom-layout-legend-ggplot2.html\n\nEach green point represents one record. We can see that the majority of records are near Canberra with some patterns in Namadgi National Park, like Boboyan Road. Let’s visualise some more maps.\nTemporal Visualisation\nThe aim of creating a circular monthly bar plot of record proportions was to explore potential temporal patterns. This plot suggests two things:\n\nThe time frequency when citizen scientists submit data and/or when professional/government teams measure/monitor invasive species. Maybe, annual monitoring occurs in May?\nThe actual temporal species distribution. For example, maybe there are more cats in May in SA, because of reproduction behaviour?\n\nLet’s create it for Feral Cats in South Australia (A screenshot was used, see GitHub for code - this blog post is already so long…).\n\n\nTemporal Feral Cats in SA"
  },
  {
    "objectID": "blog/posts/invasive_species_dashboard_report/index.html#aim-2-regionality",
    "href": "blog/posts/invasive_species_dashboard_report/index.html#aim-2-regionality",
    "title": "Invasive Animal Species Dashboard",
    "section": "Aim 2: Regionality",
    "text": "Aim 2: Regionality\nThis aim was completely abandoned, because of the scope of the project was getting too big. However, adding the capital city point highlights how majority of the selected species cluster around the capital city. Additionally, a zoom function was added to the Shiny app for users to zoom into specific patterns and areas of interest."
  },
  {
    "objectID": "blog/posts/invasive_species_dashboard_report/index.html#aim-3-data-download",
    "href": "blog/posts/invasive_species_dashboard_report/index.html#aim-3-data-download",
    "title": "Invasive Animal Species Dashboard",
    "section": "Aim 3: Data Download",
    "text": "Aim 3: Data Download\nEnsuring the data followed FAIR principles included making the data findable, such as referencing the DOIs on the dashboard. The user can select the two inputs they are interested in and can download the respective csv. The option to download the entire dashboard dataset is also available."
  },
  {
    "objectID": "blog/posts/invasive_species_dashboard_report/index.html#github-use-final-rshiny-app",
    "href": "blog/posts/invasive_species_dashboard_report/index.html#github-use-final-rshiny-app",
    "title": "Invasive Animal Species Dashboard",
    "section": "GitHub Use / Final RShiny App",
    "text": "GitHub Use / Final RShiny App\n\nFinal UI and visualisation design improvements were made using GitHub Issues to manage these efforts.\nGitHub branching was used for each Issue.\nGitHub Releases were used to distinguish major developments of the RShiny App.\n\nPlease see the README file for more information.\n\n\n\nInvasive Animal Species Dashboard (Version 1.0.0)"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "I write about a bunch of different things:\n\none-off data analysis\nuseful R tips and tricks\npersonal blog posts\n\nI hope you find something useful here! 😊\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nSpotify Exploratory Data Analysis - Streaming History Data\n\n\n\n\n\n\nData Projects\n\n\nExploratory Data Analysis\n\n\nSpotify\n\n\n\nMy Spotify streaming history throughout July 2022/2023\n\n\n\n\n\nDec 29, 2023\n\n\nJohann Wagner\n\n\n\n\n\n\n\n\n\n\n\n\nInvasive Animal Species Dashboard\n\n\n\n\n\n\nData Projects\n\n\nExploratory Data Analysis\n\n\nUniversity Assignment\n\n\n\nUniversity Assignment: Developing an RShiny dashboard to visualise invasive animal species in Australia\n\n\n\n\n\nOct 20, 2023\n\n\nJohann Wagner\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html",
    "href": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html",
    "title": "Spotify Exploratory Data Analysis - Streaming History Data",
    "section": "",
    "text": "This is a series of exploratory data analysis (EDA) projects on my Spotify data. The data was downloaded from my Spotify account on July 23rd, 2023. The data is downloaded as a zip file containing several json files and saved on my personal google drive. The json files are then converted into tibbles for analysis using the jsonlite package.\nThis quarto document is the first of several EDA projects. This project focuses on my streaming history. I’m interested in exploring my listening habits across the time period of the data. I’m also interested in exploring my listening habits across the days of the week.\nThis process is documented in the following sections:\n\nSetup and Configuration: Loading packages and googledrive API access\nData Loading: How to download and load the data?\nData Tidying: Get a tidy dataset\nData Cleaning: Ensure variables are in correct formats\nData Exploration: Answer one question and come up with two extra ones\n\nLet’s start exploring!"
  },
  {
    "objectID": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#introduction",
    "href": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#introduction",
    "title": "Spotify Exploratory Data Analysis - Streaming History Data",
    "section": "",
    "text": "This is a series of exploratory data analysis (EDA) projects on my Spotify data. The data was downloaded from my Spotify account on July 23rd, 2023. The data is downloaded as a zip file containing several json files and saved on my personal google drive. The json files are then converted into tibbles for analysis using the jsonlite package.\nThis quarto document is the first of several EDA projects. This project focuses on my streaming history. I’m interested in exploring my listening habits across the time period of the data. I’m also interested in exploring my listening habits across the days of the week.\nThis process is documented in the following sections:\n\nSetup and Configuration: Loading packages and googledrive API access\nData Loading: How to download and load the data?\nData Tidying: Get a tidy dataset\nData Cleaning: Ensure variables are in correct formats\nData Exploration: Answer one question and come up with two extra ones\n\nLet’s start exploring!"
  },
  {
    "objectID": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#setup-and-configuration",
    "href": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#setup-and-configuration",
    "title": "Spotify Exploratory Data Analysis - Streaming History Data",
    "section": "Setup and Configuration",
    "text": "Setup and Configuration\nFirst, let’s load in the packages we’ll need for this project and authorise access to my google drive.\n\n### \"Tidyverse\"-oriented packages:\n\n# The tidyverse is a collection of R packages designed for data science.\n# All packages share a similar design philosophy, grammar, and data structures.\n# Tidyverse includes packages such as:\n# ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, lubridate, and forcats.\n### https://www.tidyverse.org/\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'forcats' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# To easily create data visualisations with simple and consistent syntax and grammar.\n# https://ggplot2.tidyverse.org/index.html\nlibrary(ggplot2)\n\n# To allow interaction between files on Google Drive and R.\n# https://googledrive.tidyverse.org/\nlibrary(googledrive)\n\nWarning: package 'googledrive' was built under R version 4.4.2\n\n### Other Packages:\n# To easily create summary statistics to understand and explore data.\n# https://docs.ropensci.org/skimr/\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.4.2\n\n# A fast JSON parser and generator.\n### https://cran.r-project.org/web/packages/jsonlite/index.html\nlibrary(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\n# To easily enable file referencing in project-oriented workflows.\n# https://here.r-lib.org/\nlibrary(here)\n\nhere() starts at C:/Users/Johan/Documents/GitHub/johann-wagner.github.io\n\n# To easily format and scale data in visualisations.\n# https://scales.r-lib.org/\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n# Google Drive Authentication --------------------------------------------------\n\n# To establish a connection between a Google Drive account and R.\ndrive_auth()\n\n! Using an auto-discovered, cached token.\n  To suppress this message, modify your code or options to clearly consent to\n  the use of a cached token.\n  See gargle's \"Non-interactive auth\" vignette for more details:\n  &lt;https://gargle.r-lib.org/articles/non-interactive-auth.html&gt;\nℹ The googledrive package is using a cached token for\n  'johann.wagner@gmail.com'.\n\n# Example of how to download from Google Drive\n# drive_download(\n#   # Where to download file from\n#   \"https://drive.google.com/file/d/1Fjq1r6016H4isB2Cx2wg-Xm9zY7lHhYV/view?usp=drive_link\",\n# \n#   # Where to save it locally\n#   path = here(\"foldertest\", \"text2\")\n#   )"
  },
  {
    "objectID": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#data-loading",
    "href": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#data-loading",
    "title": "Spotify Exploratory Data Analysis - Streaming History Data",
    "section": "Data Loading",
    "text": "Data Loading\nTo access the data, I need to download it from my google drive. The data is requested from Johann’s Spotify account and downloaded as a zip file containing several json files. There are several different json files; however, for this analysis I’m only interested in the Streaming History files.\nYou will only have access if Johann has given you read access to the email you authorised in 0-00_setup_and_configuration.R.\n\n# Only download raw data if it hasn't already been downloaded\nif(!dir.exists(here(\"raw_data\"))) {\n  dir.create(here(\"raw_data\"), showWarnings = FALSE)\n\n  # List contents of Spotify Analysis Folder\n  spotify_dribble &lt;- drive_ls(\"Spotify Analysis\")\n  \n  # Download raw data\n  map2(\n    spotify_dribble$id,\n    spotify_dribble$name,\n    ~ drive_download(\n      file = as_id(.x),\n      path = here(\"raw_data\", .y),\n      overwrite = TRUE\n    )\n  )\n}\n\n\n\n# Read in individual raw json as nested lists\n# JRAW = RAW JSON\n# RAW_JSON causes alphabetical ordering inconveniences in R environment.\nJRAW_STREAMING_HISTORY_0 &lt;- read_json(\n  path = here(\n    \"raw_data\",\n    \"StreamingHistory0.json\"\n  )\n)\n\nJRAW_STREAMING_HISTORY_1 &lt;- read_json(\n  path = here(\n    \"raw_data\",\n    \"StreamingHistory1.json\"\n  )\n)\n\nJRAW_STREAMING_HISTORY_2 &lt;- read_json(\n  path = here(\n    \"raw_data\",\n    \"StreamingHistory2.json\"\n  )\n)"
  },
  {
    "objectID": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#data-tidying",
    "href": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#data-tidying",
    "title": "Spotify Exploratory Data Analysis - Streaming History Data",
    "section": "Data Tidying",
    "text": "Data Tidying\nThese json files are then converted into tibbles for analysis using the jsonlite package. The tibbles are then combined into one tibble, as they all have the same columns. I suspect the reason why there are different files is because of the size of the data.\n\nRAW_STREAMING_HISTORY_0 &lt;- JRAW_STREAMING_HISTORY_0 %&gt;% \n  bind_rows() %&gt;% \n  as_tibble()\n\nRAW_STREAMING_HISTORY_1 &lt;- JRAW_STREAMING_HISTORY_1 %&gt;% \n  bind_rows() |&gt; \n  as_tibble()\n\nRAW_STREAMING_HISTORY_2 &lt;- JRAW_STREAMING_HISTORY_2 %&gt;% \n  bind_rows() |&gt; \n  as_tibble()\n\n# Combine all streaming history tibbles into one tibble\nRAW_STREAMING_HISTORY &lt;- bind_rows(\n  RAW_STREAMING_HISTORY_0,\n  RAW_STREAMING_HISTORY_1,\n  RAW_STREAMING_HISTORY_2\n)"
  },
  {
    "objectID": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#data-cleaning",
    "href": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#data-cleaning",
    "title": "Spotify Exploratory Data Analysis - Streaming History Data",
    "section": "Data Cleaning",
    "text": "Data Cleaning\nLet’s ensure the variables are in the correct format.\n\nCLEANED_STREAMING_HISTORY &lt;- RAW_STREAMING_HISTORY |&gt; \n  mutate(\n    # Convert ms to minutes\n    min_played = as.numeric(msPlayed / 60000),\n    \n    # Convert artistName to factor\n    artist_name = as.factor(artistName),\n    \n    track_name = as.character(trackName),\n    \n    # Convert endTime into lubridate datetime\n    streaming_datetime = as_date(endTime, format = \"%Y-%m-%d %H:%M\")\n  ) |&gt; \n  \n  # Remove unnecessary columns\n  select(\n    artist_name,\n    track_name,\n    streaming_datetime,\n    min_played\n  )"
  },
  {
    "objectID": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#data-exploration",
    "href": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#data-exploration",
    "title": "Spotify Exploratory Data Analysis - Streaming History Data",
    "section": "Data Exploration",
    "text": "Data Exploration\nThis data exploration has two objectives: 1. To get a sense of the data and to see if there are any issues with the data. 2. To answer several questions that I have about my listening habits.\nSanity Checks\nThere are 23456 rows in the CLEANED_STREAMING_HISTORY tibble, which is the number of songs/podcast episodes that I have listened to between 2022-07-11 and 2023-07-11. Let’s use the function skim() from the skimr package to get a sense check of the data.\n\nCLEANED_STREAMING_HISTORY |&gt; \n  skim()\n\n\nData summary\n\n\nName\nCLEANED_STREAMING_HISTORY\n\n\nNumber of rows\n23456\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nDate\n1\n\n\nfactor\n1\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\ntrack_name\n0\n1\n1\n179\n0\n7782\n0\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\nstreaming_datetime\n0\n1\n2022-07-11\n2023-07-11\n2022-12-01\n337\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\nartist_name\n0\n1\nFALSE\n4324\nPar: 1147, Van: 271, Cou: 217, Lof: 183\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\nmin_played\n0\n1\n3.01\n2.8\n0\n1.56\n3.08\n4\n82.34\n▇▁▁▁▁\n\n\n\n\nThere are 4 columns in the CLEANED_STREAMING_HISTORY tibble. There are 4324 unique artists and 7782 unique tracks in the CLEANED_STREAMING_HISTORY tibble. It is interesting that the shortest track_name has a length of 1 characters and the longest track_name has a length of 179 characters. Interestingly, the shortest track_name has a length of 1 characters. I wonder what song that is. The date ranges between 2022-07-11 and 2023-07-11.\nIt seems like the data mostly makes sense and that there are a wide range of song names and artist names.\nReshape Data: Streaming per day\nLet’s reshape the data so that we can see how much I have streamed per day.\n\nSTREAMING_HISTORY_PER_DAY &lt;- CLEANED_STREAMING_HISTORY |&gt; \n  group_by(streaming_datetime) |&gt;\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  )\nSTREAMING_HISTORY_PER_DAY\n\n# A tibble: 337 × 2\n   streaming_datetime total_hours_played\n   &lt;date&gt;                          &lt;dbl&gt;\n 1 2022-07-11                      2.41 \n 2 2022-07-12                      5.31 \n 3 2022-07-13                      2.78 \n 4 2022-07-14                      3.52 \n 5 2022-07-15                      4.38 \n 6 2022-07-16                      9.42 \n 7 2022-07-17                      4.99 \n 8 2022-07-18                      3.64 \n 9 2022-07-19                      3.78 \n10 2022-07-20                      0.147\n# ℹ 327 more rows\n\n\nWhat were the top 5 days I listened to music?\nLet’s now investigate what the top 5 days I listened to music were and include the day of the week.\n\nTOP_SONGS &lt;- STREAMING_HISTORY_PER_DAY |&gt;\n  mutate(\n    day_of_week = wday(streaming_datetime, label = TRUE)\n  ) |&gt; \n  arrange(desc(total_hours_played)) |&gt; \n  head(5)\nTOP_SONGS\n\n# A tibble: 5 × 3\n  streaming_datetime total_hours_played day_of_week\n  &lt;date&gt;                          &lt;dbl&gt; &lt;ord&gt;      \n1 2023-05-30                       17.2 Tue        \n2 2023-02-18                       13.9 Sat        \n3 2022-11-01                       11.9 Tue        \n4 2022-12-16                       11.8 Fri        \n5 2022-09-02                       11.2 Fri        \n\n\nIt seems like 2023-05-30 and 2023-02-18 were two days when I listened to a LOT of music.\nLet’s pull it back and look at the aggregate again; I wonder what the most listened to days are?\n\nSTREAMING_HISTORY_PER_DAY |&gt; \n  mutate(\n    day_of_week = wday(streaming_datetime, label = TRUE)\n    ) |&gt; \n  group_by(day_of_week) |&gt;\n  summarise(\n    total_hours_played = sum(total_hours_played)\n  ) |&gt;\n  arrange(desc(total_hours_played))\n\n# A tibble: 7 × 2\n  day_of_week total_hours_played\n  &lt;ord&gt;                    &lt;dbl&gt;\n1 Mon                       199.\n2 Tue                       185.\n3 Sat                       180.\n4 Fri                       164.\n5 Thu                       157.\n6 Sun                       151.\n7 Wed                       140.\n\n\nSurprisingly, it seems like Mondays are the days where I have listened to the most streamed music. I wonder if this is because I listen to music on my commute to work? Although, I don’t think I was really working consistently in 2022-23.\nSo potentially this is because I listen to music when I was studying? To answer this question and gain more insights, I would need to look at my calendar and see what I was doing on those days.\nHow did my streaming time vary by day?\nLet’s plot the total hours played per day.\n\nGGPLOT_HOURS_PLAYED_PER_DAY &lt;- STREAMING_HISTORY_PER_DAY |&gt; \n  ggplot(aes(x = streaming_datetime, y = total_hours_played)) +\n  \n  geom_point() +\n  geom_line() +\n  \n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Hours Played Per Day\",\n    subtitle = \"Spotify Streaming History\"\n  ) +\n  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(\n      size = 20,\n      face = \"bold\"\n    ),\n    plot.subtitle = element_text(\n      size = 15\n    ),\n    axis.title = element_text(\n      size = 15\n    ),\n    axis.text = element_text(\n      size = 10\n    )\n  )\n\nGGPLOT_HOURS_PLAYED_PER_DAY\n\n\n\n\n\n\n\nThere is a high fluctuation in the number of hours played per day with some days, when very little music was played and some days were a lot of music was played. It seems that there are two days in particular, where I have listened to a lot of music. Let’s investigate these days further, we know that the days are: 2023-05-30 and 2023-02-18. What did I do on these two days? Let’s also include a smoothed line.\n\nGGPLOT_HOURS_PLAYED_PER_DAY +\n  \n  geom_point(aes(\n    colour = ifelse(\n      streaming_datetime == as.Date(\"2023-05-30\") | \n        streaming_datetime == as.Date(\"2023-02-18\"),\n      \"red\",\n      \"darkgrey\"\n    )\n    )\n  ) +\n  geom_line(colour = \"darkgrey\") +\n  geom_smooth() +\n  geom_label(\n    label = \"Flying to Australia\",\n    x = as.Date(\"2023-05-30\"),\n    y = STREAMING_HISTORY_PER_DAY |&gt; \n      filter(streaming_datetime == as.Date(\"2023-05-30\")) |&gt; \n      pull(total_hours_played),\n    vjust = -0.5\n  ) +\n  geom_label(\n    label = \"Flying to Austria\",\n    x = as.Date(\"2023-02-18\"),\n    y = STREAMING_HISTORY_PER_DAY |&gt; \n      filter(streaming_datetime == as.Date(\"2023-02-18\")) |&gt; \n      pull(total_hours_played),\n    vjust = -0.5\n  ) +\n    expand_limits(\n    y = c(0, 20)\n  ) +\n  scale_color_identity()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\nFlying in the plane and listening to music! That makes sense. The smoothed line suggests that there was more music listened to in the second half of 2022 than the first half of 2023.\nHow did my streaming time vary by month?\nLet’s investigate this further: what was the total number of hours played per month?\n\nSTREAMING_HISTORY_PER_MONTH &lt;- CLEANED_STREAMING_HISTORY |&gt; \n  mutate(\n    month_floor = floor_date(streaming_datetime, unit = \"month\"),\n    year_floor = floor_date(streaming_datetime, unit = \"year\")\n  ) |&gt; \n  group_by(month_floor, year_floor) |&gt;\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  )\n\n`summarise()` has grouped output by 'month_floor'. You can override using the\n`.groups` argument.\n\n\nLet’s plot the total hours played per month.\n\nSTREAMING_HISTORY_PER_MONTH |&gt; \n  ggplot(aes(x = month_floor, y = total_hours_played)) +\n  \n  geom_point() +\n  geom_line() +\n  \n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Hours Played Per Month\",\n    subtitle = \"Spotify Streaming History\"\n  ) +\n  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(\n      size = 20,\n      face = \"bold\"\n    ),\n    plot.subtitle = element_text(\n      size = 15\n    ),\n    axis.title = element_text(\n      size = 15\n    ),\n    axis.text = element_text(\n      size = 10\n    )\n  )\n\n\n\n\n\n\n\nThere seems to be a bit of a pattern. Before I went backpacking (Jan 2023), I was listening to a lot more music. Let’s calculate the total number of hours played in both years and see how different they are.\n\nSTREAMING_HISTORY_PER_MONTH |&gt; \n  group_by(year_floor) |&gt;\n  summarise(\n    total_hours_played = sum(total_hours_played)\n  )\n\n# A tibble: 2 × 2\n  year_floor total_hours_played\n  &lt;date&gt;                  &lt;dbl&gt;\n1 2022-01-01               697.\n2 2023-01-01               481.\n\n\nThere definitely seems like there is a major difference between the two years. I wonder if this is because I was travelling in 2023 and therefore didn’t have as much time to listen to music. Let’s investigate this further.\nWho were my top artists?\nLet’s investigate who my top artists are. We will do this by grouping by artist name and then calculating the total number of hours played.\n\nCLEANED_STREAMING_HISTORY |&gt; \n  group_by(artist_name) |&gt;\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  ) |&gt; \n  arrange(desc(total_hours_played)) |&gt; \n  head(10) |&gt; \n  ggplot(aes(x = reorder(artist_name, total_hours_played), y = total_hours_played)) +\n  geom_col(aes(fill = ifelse(total_hours_played &gt; 20, \"orange\", \"grey\"))) +\n  coord_flip() +\n  scale_y_continuous(\n    breaks = seq(0, 100, 10)\n  ) +\n  scale_fill_identity() +\n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Top Artists\",\n    subtitle = \"Spotify Streaming History: July 2022 - July 2023\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\nAs expected, I’m a massive Parcels fan and the data shows it! Let’s look at my top artists for each month.\n\nCLEANED_STREAMING_HISTORY |&gt; \n  mutate(\n    month_floor = floor_date(streaming_datetime, unit = \"month\")\n  ) |&gt; \n  group_by(month_floor, artist_name) |&gt;\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  ) |&gt; \n  arrange(desc(total_hours_played)) |&gt; \n  group_by(month_floor) |&gt; \n  slice(1) |&gt; \n  ggplot(aes(x = month_floor, y = total_hours_played, fill = artist_name)) +\n  geom_col() +\n  scale_fill_viridis_d() +\n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Top Artists Per Month\",\n    subtitle = \"Spotify Streaming History: July 2022 - July 2023\"\n  ) +\n  theme_minimal()\n\n`summarise()` has grouped output by 'month_floor'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nWow, Parcels really was my favourite artist consistently throughout the time range, although from April 2023 onwards, it seems I started listening to more podcasts. A further question for future investigation: How does my podcast listening behaviour change over time.\nWhat were my top songs?\nLet’s move onto top songs. We will do this by grouping by track name and then calculating the total number of hours played.\n\nCLEANED_STREAMING_HISTORY |&gt; \n  group_by(track_name, artist_name) |&gt;\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  ) |&gt; \n  arrange(desc(total_hours_played)) |&gt; \n  head(10) |&gt; \n  ggplot(aes(x = reorder(track_name, total_hours_played), y = total_hours_played)) +\n  geom_col(aes(fill = ifelse(artist_name == \"Parcels\", \"orange\", \"grey\"))) +\n  coord_flip() +\n  scale_y_continuous(\n    breaks = seq(0, 10, 2)\n  ) +\n  scale_fill_identity() +\n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Top Songs\",\n    subtitle = \"Spotify Streaming History: July 2022 - July 2023\\nOrange = Parcels\"\n  ) +\n  theme_minimal()\n\n`summarise()` has grouped output by 'track_name'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nFive of the top 10 songs were songs from Parcels.\nLet’s look at the top songs for each month.\n\nCLEANED_STREAMING_HISTORY |&gt; \n  mutate(\n    month_floor = floor_date(streaming_datetime, unit = \"month\")\n  ) |&gt; \n  group_by(month_floor, track_name, artist_name) |&gt;\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  ) |&gt; \n  arrange(desc(total_hours_played)) |&gt; \n  group_by(month_floor) |&gt; \n  slice(1) |&gt; \n  mutate(\n    fill_colour = case_when(\n      track_name == \"Lost in Music - Dimitri from Paris Remix\" ~ \"pink\",\n      artist_name == \"Parcels\" ~ \"orange\",\n      .default = \"grey\"\n      )\n  ) |&gt; \n  ggplot(aes(x = month_floor, y = total_hours_played, fill = fill_colour)) +\n  geom_col() +\n  scale_fill_identity() +\n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Top Songs Per Month\",\n    subtitle = \"Spotify Streaming History: July 2022 - July 2023\\nOrange = Parcels\\nPink = Lost in Music - Dimitri from Paris Remix\"\n  ) +\n  theme_minimal()\n\n`summarise()` has grouped output by 'month_floor', 'track_name'. You can\noverride using the `.groups` argument.\n\n\n\n\n\n\n\n\nIt seems that I listened to Lost in Music - Dimitri from Paris Remix a lot in July/August 2022. Parcels was my top artist for every month, but it seems that I listened to them a lot more in October 2022 and January/Febuary 2023.\nHow did my top 10 songs vary across time?\nLet’s investigate how my top 10 songs varied across time. We will do this by grouping by track name and then calculating the total number of hours played.\n\ntop_ten_songs &lt;- CLEANED_STREAMING_HISTORY |&gt; \n  group_by(track_name) |&gt;\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  ) |&gt; \n  arrange(desc(total_hours_played)) |&gt; \n  head(5) |&gt; \n  pull(track_name)\n\nCLEANED_STREAMING_HISTORY |&gt;\n  filter(track_name %in% top_ten_songs) |&gt; \n  mutate(\n    month_floor = floor_date(streaming_datetime, unit = \"month\")\n  ) |&gt;\n  group_by(month_floor, track_name) |&gt;\n  summarise(\n    total_hours_played = sum(min_played / 60)\n  ) |&gt;\n  ggplot(aes(x = month_floor, y = total_hours_played, colour = track_name)) +\n  \n  geom_point() +\n  geom_line() +\n  \n  labs(\n    x = \"\",\n    y = \"Hours Played\",\n    title = \"Top 5 Songs - Hours Played Per Day\",\n    subtitle = \"Spotify Streaming History\",\n    colour = \"Track Name\"\n  ) +\n  \n  theme_minimal() +\n  theme(\n    plot.title = element_text(\n      size = 20,\n      face = \"bold\"\n    ),\n    plot.subtitle = element_text(\n      size = 15\n    ),\n    axis.title = element_text(\n      size = 15\n    ),\n    axis.text = element_text(\n      size = 10\n    )\n  )\n\n`summarise()` has grouped output by 'month_floor'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nThis is super interesting. It seems that there are some rough patterns in my top 5 songs. For example, “Lost in Music - Dimitri from Paris Remix” was played a lot in the first half of 2022 and then not at all in the first half of 2023. Similarly, “The Girl” has a similar downwards trend. “Tieduprightnow” was played a lot in the new year (2023); however, also dropped. “Free” and “Bitter Sweet Symphony” were almost perfectly positively correlated with each other with the exception of late 2022.\nI wonder if I could do this analysis for all of my songs and then create a grouping/cluster analysis to see if there are any temporal patterns in my music listening? Are there some songs that I listen to with other songs? Do these songs group together because I usually listen to them from the same playlist? Can I somehow link/predict my playlist data and my streaming data?"
  },
  {
    "objectID": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#moving-forward",
    "href": "blog/posts/spotify_exploratory_data_analysis_streaming_history_data/index.html#moving-forward",
    "title": "Spotify Exploratory Data Analysis - Streaming History Data",
    "section": "Moving Forward",
    "text": "Moving Forward\nThere are quite a few questions that I would like to explore in the future. For example: - I would like to explore how my podcast listening behaviour change over time. - I would like to explore how my top 10 songs varied across time and utilise the gganimate package. - I would really like to do some time series analysis on my streaming history. - I’m curious on linking my streaming history data with my playlist data. I wonder if I can predict my playlist data based on my streaming history data. I think I would typically use Spotify by listening to my playlists, so potentially doing some clustering/grouping analysis on my streaming history data and then linking it to my playlist data would be interesting.\nThese are all questions that I would like to explore in future! But for now, these were some great first initial data explorations of my Spotify streaming history. I hope you enjoyed reading this post and I hope you learned something new about Spotify streaming history data analysis. If you have any questions or comments, please feel free to reach out to me. I would love to hear from you! :)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Johann Wagner",
    "section": "",
    "text": "Hi there, I’m Johann (he/him)! 👋\n\nNice to meet you! 😊\n\nI’m a Data Scientist working at Jobs and Skills Australia (Australian Government). I completed my Bachelor of Economics and Bachelor of Science specialising in Quantitative Environmental Modelling, Econometrics, and Applied Statistics at the Australian National University (2023). I love learning about all things data, spending quality time with friends, endurance sports (type 2 fun), and travelling. 📊📚💡\n\n\n\n🌱 My Interests:\n\nContinuous self-learning 📚\n\nData Science\nEconomics / Health Analytics\nOpen Science\n\nEndurance sports 🚲\n\nAdventure Racing\nMountain Biking\nBikepacking\n\nData-driven solutions 📊\n\nEconomic Modelling\nEnvironmental Modelling\nSpatial Visualisation\n\n\n\n\n\n📈 My Broad Goals:\n\nEmbrace quality time spent with friends and family enjoying the fun adventures 😋\nNavigate the vast data role ecosystem and try and figure out where I best fit in 💻\nImmerse myself in the data science community by sharing my data projects on my website and on LinkedIn ✏️\nContribute to open source software and promote Open Science! 🧪\n\n\n\n\n🌱 My Current Experience:\n\nData Scientist at Jobs and Skills Australia (2024 - Present)\nEconomic / Data Analyst at the Department of Education (2023 - 2024) 🏛\nIntern Consultant at Nous Group (2022) 💼\nStudent Data Scientist at the Australian Bureau of Statistics (2022) 📊\nData Officer at ACT Health (2021 - 2022) 🦠\n\n\n\n\n✅ Moving Forward:\n\nI’m always keen to chat about all things data, R programming, and open science. I’m also a big fan of open source software and the R programming language. 🌱🎓\nShoot me a message on LinkedIn or via email or any other method you prefer! 🤓\n\n\n\n\n🔗 Links:\nHere are some useful links you might be interested in:\n\n💼 My CV\n📊 My Data Projects\n✏️ My Blog\n🤓 My GitHub\n\n\n\n\n📙 Acknowledgements:\nThis website was built using Quarto.\nThe source code can be found on my GitHub.\nI’d like to thank Marvin Schmitt, Melissa Van Bussell, Samantha Csik for their tutorials on how to build a website using Quarto. Their clarity of instructions made it easy for me to build this website and encourage you to check out their work.\n\nThanks for reading until the end. 💅💅💅"
  }
]